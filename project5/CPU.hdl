// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // Decode type of instruction - C or A
    Not(in=instruction[15], out=aInstruction);
    Not(in=aInstruction, out=cInstruction);
    
    // Conditionaly store either instruction or output from ALU to A register
    And(a=cInstruction, b=instruction[5], out=outALUtoA);          // if C instruction and d1 bit, select output from ALU
    Mux16(a=instruction, b=outALU, sel=outALUtoA, out=inA);        // output either instruction or output from ALU based on above condition  
    Or(a=aInstruction, b=outALUtoA, out=loadA);                    // Or together A instruction and output from ALU to load into A register
    ARegister(in=inA, load=loadA, out=outA, out[0..14]=addressM);  // send output from A register to both below Mux and addressM
    Mux16(a=outA, b=inM, sel=instruction[12], out=outAM);          // send either register A output or M (contents of RAM{A]) to ALU based on a bit     

    // Conditionaly store output from ALU to D register
    And(a=cInstruction, b=instruction[4], out=loadD);  // if A instruction and d2 bit, load into D register 
    DRegister(in=outALU, load=loadD, out=outD);        // send out from D register to ALU

    // compute operation selected by c bits, and send output from ALU to A & D registers, and outM  
    ALU(x=outD, y=outAM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8],
    f=instruction[7],no=instruction[6], out=outALU, out=outM, zr=outIsZero, ng=outIsNegative);          

    // write to M if C instruction and d3 bit
    And(a=cInstruction, b=instruction[3], out=writeM);  
    
    // out is positive if it is not zero and not negative
    Or(a=outIsZero, b=outIsNegative, out=notPositve);  
    Not(in=notPositve, out=outisPositive);              

    // jump conditions
    And(a=outisPositive, b=instruction[0], out=jump1);  // jump if out is positive and j3 bit
    And(a=outIsZero, b=instruction[1], out=jump2);      // jump if out is zero and j2 bit
    And(a=outIsNegative, b=instruction[2], out=jump3);  // jump if out is negative and j1 bit
    
    // jump if any of the three jump conditions are true
    Or(a=jump1, b=jump2, out=jump4);
    Or(a=jump3, b=jump4, out=jump);                     
    
    // load jump address into PC or increment PC 
    And(a=cInstruction, b=jump, out=loadPC);  // assert PC load if C instruction and jump
    Not(in=loadPC, out=incPC);                // assert PC inc if not PC load
    PC(in=outA, inc=incPC, load=loadPC, reset=reset, out[0..14]=pc);
}